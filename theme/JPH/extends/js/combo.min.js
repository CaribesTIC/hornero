    var z; var moCombo = new Class({Implements:[Options, Events], options:{combo:$('cmbTest'), name:'cmbTest', options:{}, multiple:false, disabled:false, onChange:function(){}}, initialize:function(opts){var options, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p; options = Object.merge(Object.clone(this.options), opts); h = $(options.combo); a = Object.keys(options.options); b = Object.values(options.options); if (!options.multiple){n = new Element('div', {'class':'combo'}); o = new Element('span', {'class':'value'}); if (!options.disabled){p = new Element('span', {'class':'arrowUp'}); p.addEvent('click', function(){var a = new Fx.Tween(this.getNext('ol')); var b = new Fx.Tween(this.getParent()); if (this.hasClass('arrow')){a.start('opacity', '1'); b.start('height', (this.getNext('ol').getStyle('height').toInt() + 21) + 'px'); } else{a.start('opacity', '0'); b.start('height', '20px'); }
    this.toggleClass('arrow'); this.toggleClass('arrowUp'); }); o.addEvent('click', function(){this.getNext('span').fireEvent('click'); }); if (options.onChange){n.set('data-change', options.onChange); }} else{n.addClass('disabled'); p = new Element('span', {'class':'arrow'}); }}
    if (a.each){j = new Element('ol', {id:options.name, 'class':'select'}); a.each(function(c, i){k = new Element('li'); if (typeOf(b[i]) == 'object'){l = new Element('ul'); d = b[i]; e = Object.keys(d); f = Object.values(d); if (e.each){e.each(function(g, i){m = new Element('li', {text:g, rel:f[i], 'class':'option'}); if (!options.disabled){if (!options.multiple){this.makeOption(m); } else{this.makeOptionMulti(m); }}
    m.unselectable(); l.adopt(m); }, this); }
    k.addClass('group'); k.setProperty('text', c); k.adopt(l); } else{k.setProperty('text', c); k.setProperty('rel', b[i]); k.addClass('option'); if (!options.disabled){if (!options.multiple){this.makeOption(k); } else{this.makeOptionMulti(k); }}}
    k.unselectable(); if (options.disabled){j.addClass('disabled'); }
    j.adopt(k); }, this); }
    if (options.multiple){if (options.onChange){j.set('data-change', options.onChange); }
    j.replaces(h); } else{o.unselectable(); p.unselectable(); n.adopt(o); n.adopt(p); n.adopt(j); n.replaces(h); if (!options.disabled){j.getElement('.option').fireEvent('mousedown'); } else{o.setProperty('text', j.getElement('.option').getProperty('text')); }}}, makeOption:function(el){el.addEvent('mousedown', function(e){if (this.getParents('ol').getElements('input')[0].length > 0){this.getParents('ol').getElements('input')[0].destroy(); this.getParents('ol').getElements('.selected')[0].removeClass('selected'); }
    this.addClass('selected'); this.adopt(new Element('input', {'name':this.getParents('ol').get('id'), 'id':this.getParents('ol').get('id'), 'value':this.getProperty('rel'), 'type':'hidden'})); this.getParents('.combo').getElement('.value').setProperty('text', this.getProperty('text')); this.getParents('.combo').getElement('.arrowUp').fireEvent('click'); if (this.getParents('.combo')[0].getProperty('data-change') && e){var a = this.getParents('.combo')[0].getProperty('data-change'); console.log(typeof a + ' ' + a)
            a = a.replace('this\.value', '\'' + this.getParents('ol').getElements('input')[0].get('value') + '\''); if (a.contains('function')){eval('var b = ' + a); b(); } else{eval(a); }}}); }, makeOptionMulti:function(el){el.addEvent('mousedown', function(e){z = true; if (this.hasClass('selected')){this.removeClass('selected'); this.getFirst('input').destroy(); } else{this.addClass('selected'); this.adopt(new Element('input', {'name':this.getParent().get('id'), 'id':this.getParent().get('id'), 'value':this.getProperty('rel'), 'type':'hidden'})); }
    if (this.getParents('ol')[0].getProperty('data-change') && e){var a = this.getParents('ol')[0].getProperty('data-change'); a = a.replace('this\.value', '\'' + this.getParents('ol').getElements('input')[0].get('value') + '\''); if (a.contains('function')){eval('var b = ' + a); b(); } else{eval(a); }
    z = false; }}); el.addEvent('mouseup', function(){z = false; }); el.addEvent('mouseover', function(){if (z){this.fireEvent('mousedown'); }}); }}); moCombo.replace = new Class({Extends:moCombo, initialize:function(el){var a, b, c, d; if (el.each){el.each(function(b, i){a = {}; a = this.g(b); c = b.get('onchange'); d = b.retrieve('events'); if (d){c = d['change'].keys[0]; }
    this.parent({combo:b, name:b.get('name'), options:a, multiple:b.multiple, disabled:b.get('disabled'), onChange:c}); }, this); } else{a = this.g(el); this.parent({combo:el, name:el.get('name'), options:a, multiple:el.multiple, disabled:el.get('disabled'), onChange:el.get('onchange')}); }}, g:function(el){var a, b, c, d, e, f; a = el.getChildren(); e = f = {}; if (a.each){a.each(function(b){if (b.get('tag') == 'optgroup'){c = b.getChildren(); if (c.each){f = {}
    c.each(function(d){f[d.get('text')] = d.value; }); e[b.get("label")] = f; } else{e[c.get('text')] = c.value; }} else{e[b.get('text')] = b.value; }}); } else{if (a.get('tag') == 'optgroup'){c = a.getChildren(); if (c.each){f = {}
    c.each(function(d){f[d.get('text')] = d.value; }); e[a.get("label")] = f; } else{e[c.get('text')] = c.value; }} else{e[a.get('text')] = b.value; }}
    return e; }}); Element.implement({unselectable:function(){if (typeof $(this).onselectstart != 'undefined'){$(this).addEvent('selectstart', function(){return false; }); } else if (typeof $(this).style.MozUserSelect != 'undefined'){$(this).setStyle('MozUserSelect', 'none'); } else if (typeof $(this).style.WebkitUserSelect != 'undefined'){$(this).setStyle('WebkitUserSelect', 'none'); } else if (typeof $(this).unselectable != 'undefined'){$(this).setProperty('unselectable', 'on'); }}});